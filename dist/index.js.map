{
  "version": 3,
  "sources": ["../lib/index.js"],
  "sourcesContent": ["/**\n* @license Apache-2.0\n*\n* Copyright (c) 2024 The Stdlib Authors.\n*\n* Licensed under the Apache License, Version 2.0 (the \"License\");\n* you may not use this file except in compliance with the License.\n* You may obtain a copy of the License at\n*\n*    http://www.apache.org/licenses/LICENSE-2.0\n*\n* Unless required by applicable law or agreed to in writing, software\n* distributed under the License is distributed on an \"AS IS\" BASIS,\n* WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.\n* See the License for the specific language governing permissions and\n* limitations under the License.\n*/\n\n'use strict';\n\n/*\n* When adding modules to the namespace, ensure that they are added in alphabetical order according to module name.\n*/\n\n// MODULES //\n\nvar setReadOnly = require( '@stdlib/utils-define-read-only-property' );\n\n\n// MAIN //\n\n/**\n* Top-level namespace.\n*\n* @namespace ns\n*/\nvar ns = {};\n\n/**\n* @name binary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/binary}\n*/\nsetReadOnly( ns, 'binary', require( '@stdlib/random-array-tools-binary' ) );\n\n/**\n* @name binaryFactory\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/binary-factory}\n*/\nsetReadOnly( ns, 'binaryFactory', require( '@stdlib/random-array-tools-binary-factory' ) );\n\n/**\n* @name nullary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/nullary}\n*/\nsetReadOnly( ns, 'nullary', require( '@stdlib/random-array-tools-nullary' ) );\n\n/**\n* @name ternary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/ternary}\n*/\nsetReadOnly( ns, 'ternary', require( '@stdlib/random-array-tools-ternary' ) );\n\n/**\n* @name ternaryFactory\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/ternary-factory}\n*/\nsetReadOnly( ns, 'ternaryFactory', require( '@stdlib/random-array-tools-ternary-factory' ) );\n\n/**\n* @name unary\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/unary}\n*/\nsetReadOnly( ns, 'unary', require( '@stdlib/random-array-tools-unary' ) );\n\n/**\n* @name unaryFactory\n* @memberof ns\n* @readonly\n* @type {Function}\n* @see {@link module:@stdlib/random/array/tools/unary-factory}\n*/\nsetReadOnly( ns, 'unaryFactory', require( '@stdlib/random-array-tools-unary-factory' ) );\n\n\n// EXPORTS //\n\nmodule.exports = ns;\n"],
  "mappings": "aA0BA,IAAIA,EAAc,QAAS,yCAA0C,EAUjEC,EAAK,CAAC,EASVD,EAAaC,EAAI,SAAU,QAAS,mCAAoC,CAAE,EAS1ED,EAAaC,EAAI,gBAAiB,QAAS,2CAA4C,CAAE,EASzFD,EAAaC,EAAI,UAAW,QAAS,oCAAqC,CAAE,EAS5ED,EAAaC,EAAI,UAAW,QAAS,oCAAqC,CAAE,EAS5ED,EAAaC,EAAI,iBAAkB,QAAS,4CAA6C,CAAE,EAS3FD,EAAaC,EAAI,QAAS,QAAS,kCAAmC,CAAE,EASxED,EAAaC,EAAI,eAAgB,QAAS,0CAA2C,CAAE,EAKvF,OAAO,QAAUA",
  "names": ["setReadOnly", "ns"]
}
